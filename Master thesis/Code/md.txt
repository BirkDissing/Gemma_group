import numpy as np
import pandas as pd
from ase import Atoms
from ase import neighborlist
from ase import units
from ase.io import read, write
from ase.io.trajectory import Trajectory, TrajectoryWriter
from ase.md.verlet import VelocityVerlet
from ase.md.velocitydistribution import MaxwellBoltzmannDistribution
from ase.io.extxyz import read_extxyz, write_extxyz
from gpaw import GPAW
from gpaw.occupations import FermiDirac
from ase.md import MDLogger
from gpaw import setup_paths
setup_paths.insert(0, "/kemi/williamb/opt/gpaw-datasets/gpaw-setups-0.9.20000")


H_MASS = 1.008


def repartition_masses(struct: Atoms, factor: int) -> Atoms:
    cut_off = neighborlist.natural_cutoffs(struct)
    neighborList = neighborlist.NeighborList(
        cut_off, self_interaction=False, bothways=True
    )
    neighborList.update(struct)
    conn = neighborList.get_connectivity_matrix().todense()

    symbols = mol.symbols
    masses = mol.get_masses()
    prior_mass = masses.sum()

    masses[symbols == "H"] *= factor

    for line in conn[symbols == "H"]:
        line = np.array(line).flatten()

        masses[line == 1] -= H_MASS * (factor - 1)

    post_mass = masses.sum()
    assert np.abs(prior_mass - post_mass) < 1e-5
    mol.set_masses(masses)

    return mol


T = 400  # K

convergence = {
    "energy": 1e-4, #1e-7
    "density": 1e-4, #1e-7
}

mol = read("./EtOH_opt.traj")
# mol = repartition_masses(mol, factor=4)

calc = GPAW(
    occupations=FermiDirac(0.05),
    xc="PBE",
    mode="lcao",
    basis="PBE.sz",
    convergence=convergence,
    kpts=(1, 1, 1),
)
mol.set_calculator(calc)
mol.center(vacuum=10)
mol.set_pbc(True)

# Set the momenta corresponding to T=300K
MaxwellBoltzmannDistribution(mol, temperature_K=T)
 
# We want to run MD with constant energy using the VelocityVerlet algorithm.
dyn = VelocityVerlet(mol, 0.5 * units.fs)  
# 0.5 fs time step.


df = pd.DataFrame(columns=['C1(x)','C1(y)','C1(z)','C2(x)','C2(y)','C2(z)','O(x)','O(y)','O(z)','H1(x)','H1(y)','H1(z)','H2(x)','H2(y)','H2(z)','H3(x)','H3(y)','H3(z)','H4(x)','H4(y)','H4(z)','H5(x)','H5(y)','H5(z)','H6(x)','H6(y)','H6(z)'])

# Prints the forces
def print_forces(a=mol):
    force = a.get_forces()
    row = []
    for i in range(len(a)):
        for j in range(3):
            row.append(force[i,j])
    df.loc[len(df)] = row
    df.to_csv("Moldyn_dataframe.csv")

traj = Trajectory("EtOH_moldyn_NVE.traj", "w", mol)

#Function to write molecule to xyz
def write_to_xyz(a=mol):
    a.write("EtOH_moldyn.xyz", append = True)

# Funciton which tried to read xyz file from write_to_xyz into another xyz file
def write_to_xyz2():
    mol_xyz = read("EtOH_moldyn.xyz")
    write("EtOH_moldyn_converged.xyz", mol_xyz, append=True)


dyn.attach(traj.write, interval=1)
dyn.attach(print_forces, interval=1)
dyn.attach(write_to_xyz, interval=1)
#dyn.attach(write_to_xyz2, interval=1)

# Run the dynamics
dyn.run(300)
